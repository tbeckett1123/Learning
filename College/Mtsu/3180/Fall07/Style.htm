<html xmlns="undefined">
<head>
<meta http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<title>Style rules for C++ code:</title>
<style type="text/css">
<!--
body,td,th {
	font-family: Verdana, Arial, Helvetica, sans-serif;
}
-->
</style></head>
<body>
<p><b><i>Style rules for
 C++ code: </i></b></p>
<p>Begin
 the program with comments identifying the purpose of the program, the author,
 and the date written.</p>
<p>Begin
 each function prototype <b>and</b> definition with comments identifying the
 purpose of the function. Put function prototypes before <i>main</i>, and put
 function definitions after <i>main</i>. Use identifiers in function prototypes
 (not just types) -- in general a function prototype will be identical to the
 first line(s) of the corresponding definition except for the extra semicolon in
 the prototype.</p>
<p>Use
 meaningful identifiers.</p>
<p>Indent
 code as seen in examples in class and the book, using two or three spaces for
 each level of indentation. (Set the Visual Studio environment to expand tabs to
 spaces.)</p>
<p>Use
 a blank line between groups of lines or between items as needed to enhance
 readability.</p>
<p>Use
 braces { } around the then or else portion of a selection, or around the body
 of a loop, unless the body is a single statement that will fit easily on the
 same line as the control keyword.  Put each brace on a line by itself, aligned
 with the keyword of the structure (i.e, under the <i>i</i> of if). (Exception:
 for a do-while loop, the while and Boolean condition go on the same line as the
 closing brace.) </p>
<p>Avoid
 global variables (those defined outside of <i>main</i> or another function).
 Exceptions will be discussed in class.</p>
<p>Declare
 most local variables at the beginning of each function. Exceptions will be
 discussed in class.</p>
<p>Always
 display an appropriate prompt before interactive input.</p>
<p>Output
 must be neatly formatted and appropriately labeled.</p>
</body>
</html>
